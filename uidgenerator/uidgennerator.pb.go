// Code generated by protoc-gen-go.
// source: uidgennerator.proto
// DO NOT EDIT!

/*
Package uidgennerator is a generated protocol buffer package.

It is generated from these files:
	uidgennerator.proto

It has these top-level messages:
	Request
	Reply
*/
package uidgennerator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Game int32 `protobuf:"varint,1,opt,name=game" json:"game,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Reply struct {
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Request)(nil), "uidgennerator.Request")
	proto.RegisterType((*Reply)(nil), "uidgennerator.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for UIDGennerator service

type UIDGenneratorClient interface {
	NextUid(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type uIDGenneratorClient struct {
	cc *grpc.ClientConn
}

func NewUIDGenneratorClient(cc *grpc.ClientConn) UIDGenneratorClient {
	return &uIDGenneratorClient{cc}
}

func (c *uIDGenneratorClient) NextUid(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/uidgennerator.UIDGennerator/NextUid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UIDGennerator service

type UIDGenneratorServer interface {
	NextUid(context.Context, *Request) (*Reply, error)
}

func RegisterUIDGenneratorServer(s *grpc.Server, srv UIDGenneratorServer) {
	s.RegisterService(&_UIDGennerator_serviceDesc, srv)
}

func _UIDGennerator_NextUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIDGenneratorServer).NextUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uidgennerator.UIDGennerator/NextUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIDGenneratorServer).NextUid(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _UIDGennerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uidgennerator.UIDGennerator",
	HandlerType: (*UIDGenneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextUid",
			Handler:    _UIDGennerator_NextUid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("uidgennerator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0xcd, 0x4c, 0x49,
	0x4f, 0xcd, 0xcb, 0x4b, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x45, 0x11, 0x54, 0x92, 0xe5, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12,
	0xe2, 0x62, 0x49, 0x4f, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x95,
	0x24, 0xb9, 0x58, 0x83, 0x52, 0x0b, 0x72, 0x2a, 0x85, 0x04, 0xb8, 0x98, 0x4b, 0x33, 0x53, 0xc0,
	0x72, 0xcc, 0x41, 0x20, 0xa6, 0x91, 0x17, 0x17, 0x6f, 0xa8, 0xa7, 0x8b, 0x3b, 0xdc, 0x28, 0x21,
	0x4b, 0x2e, 0x76, 0xbf, 0xd4, 0x8a, 0x92, 0xd0, 0xcc, 0x14, 0x21, 0x31, 0x3d, 0x54, 0xab, 0xa1,
	0x56, 0x48, 0x89, 0x60, 0x88, 0x17, 0xe4, 0x54, 0x2a, 0x31, 0x38, 0x19, 0x70, 0x49, 0x67, 0xe6,
	0xeb, 0xa5, 0x17, 0x15, 0x24, 0xeb, 0xa5, 0x56, 0x24, 0xe6, 0x16, 0xe4, 0xa4, 0x16, 0xeb, 0x15,
	0xe5, 0x97, 0x96, 0xa4, 0xa6, 0x97, 0x66, 0xa6, 0xa4, 0x3a, 0xf1, 0x07, 0x81, 0xd8, 0xee, 0x20,
	0x76, 0x00, 0xc8, 0x13, 0x01, 0x8c, 0x49, 0x6c, 0x60, 0xdf, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x86, 0x7b, 0xf3, 0xa5, 0xe4, 0x00, 0x00, 0x00,
}
